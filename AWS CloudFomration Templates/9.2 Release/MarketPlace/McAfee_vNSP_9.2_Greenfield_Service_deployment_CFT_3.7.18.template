{  
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The CFT deploys McAfee Network Security Platform AWS Solution. It creates a VPC, Public subnet, Private Subnet, Internet Gateway, Public Route Table, IAM roles, Security Groups, Network security Manager, Controller and Network Security Platform(with an autoscaling option)",
  "Metadata": {
	"Comment" : "Greenfield Cloud formation template v1.0.",
	"AWS::CloudFormation::Interface": {
      "ParameterGroups": [
      {
		"Label": {
			"default": "Network Configurations"
			},
		"Parameters": [
			"VPCCIDR",
			"PublicSubnetCIDR",
			"PrivateSubnetCIDR",
			"ServiceAZ"
			]
       },	
	{
		"Label": {
			"default": "McAfee NSP Manager Settings"
			},
		"Parameters": [
			"UserName",
			"UserPassword",
			"DBPassword",
			"LicenseURL",
			"NSMSGSettings"
			  ]
      },
	{
		"Label": {
			"default": "McAfee NSP Controller Settings"
			},
		"Parameters": [
			"ControllerSharedSecretKey"
			]
      },
	{
		"Label": {
			"default": "McAfee NSP Sensor Settings"
			},
		"Parameters": [
			"ClusterName",
			"ClusterSecret"
			  ]
      },  
	{
		"Label": {
			"default": "McAfee NSP Sensor AutoScale - Group Configuration Settings"
			},
		"Parameters": [
			"MaxSize"
			]
	},
	{
		"Label": {
			"default": "McAfee NSP Sensor AutoScale Group - Alarm Configuration Settings [Alarm Metric : CPU]"
			},
		"Parameters": [
			"AlarmThresholdUpper",
			"AlarmThresholdLower",
			"AlarmWatchPeriod"
			]
	},
	{
		"Label": {
			"default": "Instance SSH Settings"
			},
		"Parameters": [
			  "KeyName"
			]
	}
      ],
      "ParameterLabels": { 
	"VPCCIDR": {
            "default": "Service VPC"
      },
	"PublicSubnetCIDR": {
            "default": "Service Management Subnet"
	},
	"PrivateSubnetCIDR": {
            "default": "Service Data Subnet"
	},	  
	"ServiceAZ": {
		"default" : "Availability Zone for Service VPC Subnets"
	},
	"ControllerSharedSecretKey": {
            "default": "Controller-Manager Shared Secret Key"
	},
	"UserName":{
	   "default": "Login User Name"
	},
	 "UserPassword":{
	   "default": "Login User Password"
	},
	 "DBPassword":{
		"default": "DB root password"
	},
	"LicenseURL":{
		"default": "License File download URL"
	},
	"NSMSGSettings": {
            "default": "Source CIDR for RDP and HTTPS Access"
       },
	"ClusterName": {
		"default": "ClusterName"
	},
	"ClusterSecret": {
		"default": "ClusterSecret"
	},
	"KeyName":{
		"default": "Key Name"
	},
	"MaxSize" : {
		"default": "Max Size"
	  },
	"AlarmThresholdUpper" : {
		"default" : "CPU Average for Upper Threshold Alarm"
	},
	"AlarmThresholdLower" : {
		"default" : "CPU Average for Lower Threshold Alarm"
	},
	"AlarmWatchPeriod" : {	
		"default" : "Alarm Monitoring Time Interval"
	}
	}
	}
  },	
  "Parameters": {
   
	"VPCCIDR": {
      "Description": "IPv4 CIDR for VPC. Eg:10.30.0.0/16",
      "Type": "String",
      "AllowedPattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be IPv4 CIDR notation: X.X.X.X/X"
	},
	"PublicSubnetCIDR": {
      "Description": "IPv4 CIDR for Management Subnet. Eg:10.30.10.0/24",
      "Type": "String",
      "AllowedPattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be IPv4 CIDR notation: X.X.X.X/X"
      },
	"PrivateSubnetCIDR": {
      "Description": "IPv4 CIDR for Data Subnet. Eg:10.30.20.0/24",
      "Type": "String",
      "AllowedPattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))$",
      "ConstraintDescription": "Must be IPv4 CIDR notation: X.X.X.X/X"
      },
	"ServiceAZ": {
	"Description": "Choose Availability Zone for creating Service VPC Subnets",
	"Type": "AWS::EC2::AvailabilityZone::Name"
	},
	"ControllerSharedSecretKey": {
      "Description": "Shared key used for Controller-Manager registration",
      "Type": "String",
      "MinLength": "3",
	  "NoEcho" : "true" 
	},
	"UserName": {
	"Description" : "Login user name for NSP manager ( Max 64 chars. Allowed characters ~`!@#$%^&*_+-=[ ]{ }|;:',.<?/\\\"() )",
	"Type": "String",
	"MaxLength": "64",
	"ConstraintDescription": "must be a string"
	},
	"UserPassword": {
	"Description" : "Login user password for NSP manager. (Recommended to use strong password. Must be Alphanumeric. Min 8 chars)",
	"Type": "String",
	"MinLength": "8",
	"NoEcho" : "true",
	"ConstraintDescription": "must be a string"
	},
	"DBPassword": {
	"Description" : "Database root password for NSP manager.",
	"Type": "String",
	"NoEcho" : "true",
	"ConstraintDescription": "must be a string"
	},
	"LicenseURL": {
	"Description" : "Virtual IPS license file download link. License will be downloaded and installed on the manager. So please be very cautious on having the downlodable permissions for the file. Eg: https://s3-us-west-2.amazonaws.com/mylicensefiles/Samplelicensefile.zip",
	"Type": "String",
	"MinLength":"1",
	"ConstraintDescription": "must be a proper URL. Eg:https://s3-us-west-2.amazonaws.com/mylicensefiles/Samplelicensefile.zip"
	},
	"NSMSGSettings": {
	"Description": "Enter allowed Inbound Source Address Range for RDP and HTTPS access to the Manager (Eg: To allow inbound access from any source value is 0.0.0.0/0)",
	"Type": "String",
	"AllowedPattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/([0-9]|[1-2][0-9]|3[0-2]))$",
	"ConstraintDescription": "Must be valid IPv4 CIDR notation: X.X.X.X/X"
	},
	"ClusterName": {
	"Description": "Name of the Cluster to be configured in the manager. (Max 30 chars)",
	"Type": "String",
	"MinLength": "3",
	"MaxLength" : "30"
	},
	"ClusterSecret": {
	"Description": "Secret key for Manager-Sensor trust (Min 8 chars and Max 25 chars)",
	"Type": "String",
	"MinLength": "8",
	"MaxLength" : "25",
	"NoEcho" : "true"
	},
	"KeyName": {
	"Description" : "Name of an existing EC2 KeyPair to enable SSH access to the Sensor Instances",
	"Type": "AWS::EC2::KeyPair::KeyName",
	"ConstraintDescription": "must be the name of an existing EC2 KeyPair."
	},
	"MaxSize": {
	"Description": "Maximum number of Sensor instances to be launched from the AutoScaling Group. (Must be number Eg: 10. Default is: 5 ; Maximum Allowed: 20)",
	"Type": "String",
	"Default" : "5",
	"AllowedPattern" : "^([01]?\\d|20)$",
	"ConstraintDescription": "must be a valid number and the Max Size value should be less than or equal to 20"
	},	
	"AlarmThresholdUpper" : {
	"Description": "Average CPU Utilization for Upper Threshold Alarm in Percentage. (Must be number and < 100. Eg: 30 )",
	"Type": "String",
	"AllowedPattern" : "^[0-9]?[0-9]{1}$|^100$",
	"Default" : "70",
	"ConstraintDescription": "must be a valid number and the Threshold value should be less than or equal to 100"
	},
	"AlarmThresholdLower" : {
	"Description": "Average CPU Utilization for Lower Threshold Alarm in Percentage. (Must be number and < 100. Eg: 15 )",
	"Type": "String",
	"AllowedPattern" : "^[0-9]?[0-9]{1}$|^100$",
	"Default" : "30",
	"ConstraintDescription": "must be a valid number and the Threshold value should be less than or equal to 100"
	},
	"AlarmWatchPeriod" : {
	"Description": "Sensor Monitoring Timer Interval (specify a time in seconds that is also a multiples of 60. Default is 300s)",
	"Type": "String",
	"AllowedPattern" : "\\d+",
	"Default" : "300",
	"ConstraintDescription": "must be a valid Number.Enter time in seconds that is also a multiple of 60"
	}
  },

"Mappings" : {
    "TemplateMap" : {  
	
	"ap-northeast-1": {
		"NSMAMI": "ami-110e4277",
		"ControllerAMI" : "ami-a70c40c1",
		"SensorAMI": "ami-120e4274"
       },
	"ap-northeast-2": {
		"NSMAMI": "ami-231db04d",
		"ControllerAMI" : "ami-4c02af22",
		"SensorAMI": "ami-ed03ae83"
       },
	"ap-south-1": {
		"NSMAMI": "ami-bd613fd2",
		"ControllerAMI" : "ami-d99fc1b6",
		"SensorAMI": "ami-be603ed1"
       },	
	"ap-southeast-1": {
		"NSMAMI": "ami-1d623661",
		"ControllerAMI" : "ami-7162360d",
		"SensorAMI": "ami-59613525"
       },
	"ap-southeast-2": {
		"NSMAMI": "ami-c66baaa4",
		"ControllerAMI" : "ami-0f66a76d",
		"SensorAMI": "ami-8066a7e2"
       },	
	"us-west-1": {
		"NSMAMI": "ami-cfaea4af",
		"ControllerAMI" : "ami-7fa9a31f",
		"SensorAMI": "ami-7ea9a31e"
       },
	"us-west-2": {
		"NSMAMI": "ami-7d910505",
		"ControllerAMI" : "ami-129d096a",
		"SensorAMI": "ami-ac9105d4"
       },
	"us-east-1": {
		"NSMAMI": "ami-4445b939",
		"ControllerAMI" : "ami-4b44b836",
		"SensorAMI": "ami-6e46ba13"
       },	
	"us-east-2": {
		"NSMAMI": "ami-c17f49a4",
		"ControllerAMI" : "ami-ca7e48af",
		"SensorAMI": "ami-c07c4aa5"
       },
	"sa-east-1": {
		"NSMAMI": "ami-01115b6d",
		"ControllerAMI" : "ami-3d105a51",
		"SensorAMI": "ami-a2105ace"
       },
	"ca-central-1": {
		"NSMAMI": "ami-0d4bcc69",
		"ControllerAMI" : "ami-6c4ec908",
		"SensorAMI": "ami-0841c66c"
       },
	"eu-central-1": {
		"NSMAMI": "ami-1309677c",
		"ControllerAMI" : "ami-48076927",
		"SensorAMI": "ami-870668e8"
       },
	"eu-west-1": {
		"NSMAMI": "ami-2d7f3c54",
		"ControllerAMI" : "ami-1b7e3d62",
		"SensorAMI": "ami-2e7f3c57"
       },
	"eu-west-2": {
		"NSMAMI": "ami-d4ec0bb3",
		"ControllerAMI" : "ami-efe20588",
		"SensorAMI": "ami-8ee007e9"
	   },
	"eu-west-3": {
	    "NSMAMI": "ami-4054e23d",
		"ControllerAMI" : "ami-4354e23e",
		"SensorAMI": "ami-4154e23c"
	}
	}
},	
  
  "Resources" : {

	"VPC" : {
		"Type" : "AWS::EC2::VPC",
		"Properties": {
		"CidrBlock" : { "Ref" : "VPCCIDR"},
		"Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{"Ref" : "AWS::StackName"},"VPC"]]}}],
		"EnableDnsSupport": "true",
		"EnableDnsHostnames": "true"
		}
      },
	   
	"PublicSubnet": {
		"Type": "AWS::EC2::Subnet",
		"DependsOn": "VPC",
		"Properties" : {
		"CidrBlock" : {"Ref":"PublicSubnetCIDR"},
		"AvailabilityZone" : {"Ref" : "ServiceAZ"},
		"Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{"Ref" : "AWS::StackName"},"PublicSubnet"]]}}],
		"VpcId": {
		"Ref": "VPC"
		}
		}
      },
		
	"PrivateSubnet": {
		"Type": "AWS::EC2::Subnet",
		"DependsOn": "VPC",
		"Properties" : {
		"CidrBlock" : {"Ref":"PrivateSubnetCIDR"},
		"AvailabilityZone" : {"Ref" : "ServiceAZ"},
		"Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{"Ref" : "AWS::StackName"},"PrivateSubnet"]]}}],
		"VpcId": {
		"Ref": "VPC"
		}
		}
      },
	   
	"InternetGateway" : {
		"Type" : "AWS::EC2::InternetGateway",
		"Properties" : {
		"Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"IntGW"]]}} ]
		}
      },

	"AttachGateway" : {
		"Type" : "AWS::EC2::VPCGatewayAttachment",
		"Properties" : {
		"VpcId" : { "Ref" : "VPC" },
		"InternetGatewayId" : { "Ref" : "InternetGateway" }		
		}
      },
	
	"PublicRouteTable" : {
		"Type" : "AWS::EC2::RouteTable",
		"Properties" : {
		"VpcId" : {"Ref" : "VPC"},
		"Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"PublicRouteTable"]]}} ]
		}
      },

  	"PublicRoute" : {
		"Type" : "AWS::EC2::Route",
		"DependsOn" : "AttachGateway",
		"Properties" : {
		"RouteTableId" : { "Ref" : "PublicRouteTable" },
		"DestinationCidrBlock" : "0.0.0.0/0",
		"GatewayId" : { "Ref" : "InternetGateway" }
		}
      },
	
  	"PublicSubnetRouteTableAssociation": {
		"Type": "AWS::EC2::SubnetRouteTableAssociation",
		"Properties": {
		"SubnetId": {
		"Ref": "PublicSubnet"
		},
		"RouteTableId": {
		"Ref": "PublicRouteTable"
		}
		}
	},
	  
	"SecurityGroupManager" : {
		"Type" : "AWS::EC2::SecurityGroup",
		"Properties" : {
		"GroupDescription" : "McAfee NSP AWS Solution- NSP Manager Security Group",
		"Tags" : [ {"Key" : "Name", "Value" :"McAfeevNSPManager"} ],
		"VpcId" : 
		{"Ref" : "VPC"
		},
		"SecurityGroupIngress" : [
                {
		"IpProtocol" : "tcp",
		"FromPort" : "3389",
		"ToPort" : "3389",
		"CidrIp" : {"Ref" : "NSMSGSettings"}
		},
		{
		"IpProtocol" : "tcp",
		"FromPort" : "443",
		"ToPort" : "443",
		"CidrIp" : {"Ref" : "NSMSGSettings"}
		}
		]
		}
	},

	"SecurityGroupController" : {
		"Type" : "AWS::EC2::SecurityGroup",
		"Properties" : {
		"GroupDescription" : "McAfee NSP AWS Solution- NSP Controller Security Group",
		"Tags" : [ {"Key" : "Name", "Value" :"McAfeevNSPController"} ],
		"VpcId" : 
		{"Ref" : "VPC"
		}
		}
      },

	"SecurityGroupSensorMgmt" : {
		"Type" : "AWS::EC2::SecurityGroup",
		"Properties" : {
		"GroupDescription" : "McAfee NSP AWS Solution- NSP Sensor Management Suubnet Security Group",
		"Tags" : [ {"Key" : "Name", "Value" :"McAfeevNSPSensorMgmt"} ],
		"VpcId" : 
		{"Ref" : "VPC"
		}
		}
      },

	  
	"SecurityGroupSensorData" : {
		"Type" : "AWS::EC2::SecurityGroup",
		"Properties" : {
		"GroupDescription" : "McAfee NSP AWS Solution- NSP Sensor Data Sunbent Security Group",
		"Tags" : [ {"Key" : "Name", "Value" :"McAfeevNSPSensorData"} ],
		"VpcId" : 
		{"Ref" : "VPC"
		}
		}
      },
    
	
	"NSMIngressAllowChannelPorts1" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		 "IpProtocol" : "tcp",
		 "ToPort" : "8504",
		 "FromPort" : "8501",
		 "GroupId": {"Ref": "SecurityGroupManager"},
		 "SourceSecurityGroupId":{ "Ref": "SecurityGroupSensorMgmt" }
		 }
	},
	
	"NSMIngressAllowChannelPorts2" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "8509",
		"FromPort" : "8506",
		"GroupId": {"Ref": "SecurityGroupManager"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupSensorMgmt" }
		}
	},	
		 	 
	"NSMIngressAllowHTTPSController" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupManager"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupController" }
		}
	},
    		 
	"NSMIngressAllowHTTPSSensor" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		 "IpProtocol" : "tcp",
		 "ToPort" : "443",
		 "FromPort" : "443",
		 "GroupId": {"Ref": "SecurityGroupManager"},
		 "SourceSecurityGroupId":{ "Ref": "SecurityGroupSensorMgmt" }
		 }
	},
    		 					 
	"ControllerIngressAllowSSHManager" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "22",
		"FromPort" : "22",
		"GroupId": {"Ref": "SecurityGroupController"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupManager" }
		}
	},

		 
	"ControllerIngressAllowHTTPSSensor" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupController"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupSensorMgmt" }
		}
	},
		 
	"ControllerIngressAllowHTTPSManager" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupController"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupManager" }
		}
	},
	
	"ControllerIngressDBConnect" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "3306",
		"FromPort" : "3306",
		"GroupId": {"Ref": "SecurityGroupController"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupController" }
		}
	},	 
	
	"SensorMgmtIngressAllowSSHManager" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "22",
		"FromPort" : "22",
		"GroupId": {"Ref": "SecurityGroupSensorMgmt"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupManager" }
		}
	},	 
	
	"SensorMgmtIngressCommandChannel" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		"IpProtocol" : "udp",
		"ToPort" : "8500",
		"FromPort" : "8500",
		"GroupId": {"Ref": "SecurityGroupSensorMgmt"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupManager" }
		}
	},

	"SensorMgmtIngressAllowHTTPSController" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupSensorMgmt"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupController" }
		}
	},

	"SensorMgmtIngressAllowHTTPSManager" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupSensorMgmt"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupManager" }
		}
	},	 
		 		 	
	
	"SensorDataEgressAllowDataPort" : {
		"Type" : "AWS::EC2::SecurityGroupIngress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "9797",
		"FromPort" : "9797",
		"GroupId": {"Ref": "SecurityGroupSensorData"},
		"CidrIp" : {"Ref":"PrivateSubnetCIDR"}
		}
	},
		 
	"SensorDataEgressCommandChannel" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "udp",
		"ToPort" : "8500",
		"FromPort" : "8500",
		"GroupId": {"Ref": "SecurityGroupManager"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupSensorMgmt" }
		}
	},	
	
	"NSMEgressAllowHTTPSController" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupManager"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupController" }
		}
       },	
	   
	"NSMEgressAllowSSHController" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "22",
		"FromPort" : "22",
		"GroupId": {"Ref": "SecurityGroupManager"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupController" }
		}
	},
			 
	"NSMEgressAllowHTTPSSensor" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupManager"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupSensorMgmt" }
		}
	},

	"NSMEgressAllowSSHSensor" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "22",
		"FromPort" : "22",
		"GroupId": {"Ref": "SecurityGroupManager"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupSensorMgmt" }
		}
	},	

	"NSMEgressAllowHTTPSAll" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupManager"},
		"CidrIp" : "0.0.0.0/0"
		}
	},   
	
	"ControllerEgressAllowHTTPSSensor" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupController"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupSensorMgmt" }
		}
	},
	
	"ControllerEgressAllowHTTPSManager" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupController"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupManager" }
		}
	},	
	
	"ControllerEgressDBConnect" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "3306",
		"FromPort" : "3306",
		"GroupId": {"Ref": "SecurityGroupController"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupController" }
		}
	},	

	"ControllerEgressAllowHTTPSAll" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupController"},
		"CidrIp" : "0.0.0.0/0"
		}
	},	  
	
	"SensorMgmtEgressChannelPorts1" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "8504",
		"FromPort" : "8501",
		"GroupId": {"Ref": "SecurityGroupSensorMgmt"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupManager" }
		}
	},	 
	
	"SensorMgmtEgressChannelPorts2" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "8509",
		"FromPort" : "8506",
		"GroupId": {"Ref": "SecurityGroupSensorMgmt"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupManager" }
		}
	},	 
	
	"SensorMgmtEgressAllowHTTPSController" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupSensorMgmt"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupController" }
		}
	},	 
	
	"SensorMgmtEgressAllowHTTPSManager" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupSensorMgmt"},
		"SourceSecurityGroupId":{ "Ref": "SecurityGroupManager" }
		}
	},
	
	"SensorMgmtEgressAllowHTTPSAll" : {
		"Type" : "AWS::EC2::SecurityGroupEgress",
		"Properties" : {
		"IpProtocol" : "tcp",
		"ToPort" : "443",
		"FromPort" : "443",
		"GroupId": {"Ref": "SecurityGroupSensorMgmt"},
		"CidrIp" : "0.0.0.0/0"
		}
	},
	
	"NSMInstance" : {
		"Type" : "AWS::EC2::Instance",
		"Metadata" : {
		"AWS::CloudFormation::Init" : {
		"config" : {
		"files" : {
		"C:/Program Files/nsm_data.txt" : {
		"content" : { "Fn::Join" : ["", [
		"{\"","username","\":","\"",{"Ref":"UserName"},"\"",",","\"","userpassword","\":","\"",{"Ref":"UserPassword"},"\"",",","\"","dbpassword","\":","\"",{"Ref":"DBPassword"},"\"}"
		]]}
		},
		"C:/Users/Administrator/Desktop/ScriptFiles/demodata.txt" : {
		"content" : { "Fn::Join" : ["", [
		"ISM_IP=","localhost","\n",
		"API_ISM_USERNAME=",{"Ref" : "UserName"},"\n",
		"API_ISM_PASSWD=",{"Ref" : "UserPassword"},"\n",
		"CLOUD_PLATFORM=AWS","\n",
		"CONTROLLER_NAME=",{"Ref" : "AWS::StackName"},"Controller", "\n",
		"CONTROLLER_SECRET=",{"Ref":"ControllerSharedSecretKey"}, "\n",
		"CONTROLLER_SUBNET=","169.254.0.0/17", "\n",
		"CONTROLLER_CLOUD_REGION=", { "Ref" : "AWS::Region" }, "\n",
		"USE_IAM_ROLE=TRUE","\n",
		"CLUSTER_NAME=", {"Ref":"ClusterName"}, "\n",
		"CLUSTER_SECRET=", {"Ref":"ClusterSecret"} , "\n",
		"STACK_NAME=", { "Ref" : "AWS::StackName" }, "\n",
		"RESOURCE=", "NSMInstance", "\n",
		"REGION=", { "Ref" : "AWS::Region" }, "\n",
		"LICENSE_S3_URL=",{"Ref":"LicenseURL"},"\n",
		"CONTROLLER_WAIT_HANDLE=", { "Fn::Base64" : { "Ref" : "ControllerCreationWaitHandle" }}, "\n",
		"CLUSTER_WAIT_HANDLE=", { "Fn::Base64" : { "Ref" : "ClusterCreationWaitHandle" }}, "\n"
		]]}
		}
		}
		}
		}
		},
		"Properties" : {
		"ImageId" : { "Fn::FindInMap" : [ "TemplateMap", { "Ref" : "AWS::Region" }, "NSMAMI" ]},
		"Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"Manager"]]}} ],
		"InstanceType" : "m4.xlarge",
		"IamInstanceProfile": {
		"Ref": "NSMInstanceProfile"
		},
		"EbsOptimized" : "true",
		"NetworkInterfaces": [ {
		"AssociatePublicIpAddress": "true",
		"DeviceIndex": "0",
		"GroupSet": [{ "Ref" : "SecurityGroupManager" }],
		"SubnetId": { "Ref" : "PublicSubnet" }
		} ],
		"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
		"<script>\n",

		"cfn-init.exe -s ", { "Ref" : "AWS::StackName" },
		" -r NSMInstance",
		" --region ", { "Ref" : "AWS::Region" }, "\n",
		"NetSh Advfirewall set allprofiles state off", "\n",
		"cd \"C:\\Program Files\\McAfee\\Network Security Manager\\App\\diag\\UpdateUserDetails\"", "\n",
		"call \"UpdateUserDetails.bat\"","\n",

		"</script>"
		]]}},
		"KeyName": { "Ref": "KeyName" }
		}
	},
	
	"NSMRole": {
		"Type": "AWS::IAM::Role",
		"Properties": {
		"RoleName":{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"NSMRole"]]},
		"AssumeRolePolicyDocument": {
		"Statement": [
		{
		"Effect": "Allow",
		"Principal": {
		"Service": [
			"ec2.amazonaws.com"
		]
		},
		"Action": [
		"sts:AssumeRole"
		]
		}
		]
		},
		"Path": "/"
		}
	},
	
	"NSMRolePolicies": {
		"Type": "AWS::IAM::Policy",
		"Properties": {
		"PolicyName":{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"NSMRolePolicy"]]},
		"PolicyDocument": {
		"Version": "2012-10-17",
		"Statement": [
		{
		"Sid" : "1",
		"Effect": "Allow",
		"Action": 
		[
                "ec2:DescribeInstances",
                "ec2:DescribeTags",
                "ec2:DescribeVpcs",
                "ec2:DescribeSubnets",
                "ec2:DescribeAddresses",
                "ec2:AssociateAddress",
                "ec2:DisassociateAddress",
		        "ec2:DescribeInstanceStatus"
		],
		"Resource": ["*"]
		}
		]
		},
		"Roles": [
		{
		"Ref": "NSMRole"
		}
		]
		}
	},
	
	"NSMInstanceProfile": {
		"Type": "AWS::IAM::InstanceProfile",
		"Properties": {
		"Path": "/",
		"Roles": [
		{
			"Ref": "NSMRole"
		}
		]
		}
	},
	"SensorRole": {
		"Type": "AWS::IAM::Role",
		"Properties": {
		"RoleName":{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"SensorRole"]]},
		"AssumeRolePolicyDocument": {
		"Statement": [
		{
		"Effect": "Allow",
		"Principal": {
		"Service": [
			"ec2.amazonaws.com"
		]
		},
		"Action": [
		"sts:AssumeRole"
		]
		}
		]
		},
		"Path": "/"
		}
	},
	
	"SensorRolePolicies": {
		"Type": "AWS::IAM::Policy",
		"Properties": {
		"PolicyName":{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"SensorRolePolicy"]]},
		"PolicyDocument": {
		"Version": "2012-10-17",
		"Statement": [
		{
		"Sid" : "1",
		"Effect": "Allow",
		"Action": 
		[
                "ec2:AttachNetworkInterface",
                "ec2:CreateNetworkInterface",
                "ec2:ModifyNetworkInterfaceAttribute" 
		],
		"Resource": ["*"]
		}
		]
		},
		"Roles": [
		{
		"Ref": "SensorRole"
		}
		]
		}
	},
	
	"SensorInstanceProfile": {
		"Type": "AWS::IAM::InstanceProfile",
		"Properties": {
		"Path": "/",
		"Roles": [
		{
			"Ref": "SensorRole"
		}
		]
		}
	},
	"ControllerCreationWaitHandle" : {
		"Type" : "AWS::CloudFormation::WaitConditionHandle"
	},

	"ControllerCreationWaitCondition" : {
		"Type" : "AWS::CloudFormation::WaitCondition",
		"DependsOn" : "NSMInstance",
		"Properties" : {
		"Handle" : {"Ref" : "ControllerCreationWaitHandle"},
		"Timeout" : "1800"
		}
	},

	"ControllerInstance" : {
		"Type" : "AWS::EC2::Instance",
		"DependsOn" : "ControllerCreationWaitCondition",
		"Properties" : {
		"ImageId" : { "Fn::FindInMap" : [ "TemplateMap", { "Ref" : "AWS::Region" }, "ControllerAMI" ]},
		"Tags" : [ {"Key" : "Name", "Value" :{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"Controller"]]}} ],
		"InstanceType" : "c4.xlarge",
		"EbsOptimized" : "true",
		"NetworkInterfaces": [ {
		"AssociatePublicIpAddress": "false",
		"DeviceIndex": "0",
		"GroupSet": [{ "Ref" : "SecurityGroupController" }],
		"SubnetId": { "Ref" : "PublicSubnet" }}],
		"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
		"{",
		"\"Primary NSM IP\"",":","\"",{ "Fn::GetAtt": ["NSMInstance", "PrivateIp"]},"\"",","," ",
		"\"Secondary NSM IP\"",":","\" \"",","," ",
		"\"Controller Name\"",":","\"",{"Ref" : "AWS::StackName"},"Controller","\"",","," ",
		"\"Controller EIP\"",":","\"","\"",","," ",
		"\"Controller Shared Key\"",":","\"",{"Ref":"ControllerSharedSecretKey"},"\"",
		"}"
		]]}}
		}
	},

	"ClusterCreationWaitHandle" : {
		"Type" : "AWS::CloudFormation::WaitConditionHandle"
	},

	"ClusterCreationWaitCondition" : {
		"Type" : "AWS::CloudFormation::WaitCondition",
		"DependsOn" : "NSMInstance",
		"Properties" : {
		"Handle" : {"Ref" : "ClusterCreationWaitHandle"},
		"Timeout" : "1800"
		}
	},
	
	"LaunchConfig" : {
		"Type" : "AWS::AutoScaling::LaunchConfiguration",
		"DependsOn": "ClusterCreationWaitCondition",
		"Properties" : {
		"KeyName" : { "Ref" : "KeyName" },
		"ImageId" : { "Fn::FindInMap" : [ "TemplateMap", { "Ref" : "AWS::Region" }, "SensorAMI" ]}, 
		"SecurityGroups" : [ { "Ref" : "SecurityGroupSensorMgmt" }],
		"InstanceType" : "c4.xlarge",
		"AssociatePublicIpAddress" : "true",
		"IamInstanceProfile": { "Ref": "SensorInstanceProfile" },
		"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
		"{\n",
		"\"","Primary NSM IP","\"",":","\"",{ "Fn::GetAtt": ["NSMInstance", "PrivateIp"]},"\"",",",
		"\"","Secondary NSM IP","\"",":","\"","\"",",",
		"\"","Cluster Name","\"",":","\"",{"Ref":"ClusterName"},"\"",",",
		"\"","Sensor Shared Key","\"",":","\"",{"Ref":"ClusterSecret"},"\"",",\n",
		"\"dataSubnet\""," : ","\"",{"Ref" : "PrivateSubnet"},"\"",",","\n",
		"\"dataSecurityGroups\""," : ","\"",{"Ref" : "SecurityGroupSensorData"},"\"","\n",
		"}"
		]]}}
		}
	},
		 		 
	"AutoScalingGroup" : {
		"DependsOn" : "LaunchConfig",
		"Type" : "AWS::AutoScaling::AutoScalingGroup",
		"Properties" : {
		"Tags" : [ {
		"Key" : "Name", 
		"Value" :{ "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"Sensor"]]},
		"PropagateAtLaunch" : "true"
		}],
		"LaunchConfigurationName" : {"Ref":"LaunchConfig"},
		"MinSize" : "1",
		"MaxSize" : {"Ref" : "MaxSize"},
		"VPCZoneIdentifier": [
		{
		"Ref": "PublicSubnet"
		}
		]
		}
	},
   
	"IncreaseCapacity" : {
		"Type" : "AWS::AutoScaling::ScalingPolicy",
		"DependsOn" : "AutoScalingGroup",
		"Properties" : {
		"AdjustmentType" : "ChangeInCapacity",
		"AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
		"ScalingAdjustment" : "1"
		}
      },
	
	"DecreaseCapacity" : {
		"Type" : "AWS::AutoScaling::ScalingPolicy",
		"DependsOn" : "AutoScalingGroup",
		"Properties" : {
		"AdjustmentType" : "ChangeInCapacity",
		"AutoScalingGroupName" : { "Ref" : "AutoScalingGroup" },
		"ScalingAdjustment" : "-1"
		}
	},
		  
	"ScaleupAlarm": {
		"Type": "AWS::CloudWatch::Alarm",
		"DependsOn" : "IncreaseCapacity",
		"Properties": {
		"AlarmName" : { "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"UpperThresholdAlarm"]]},
		"AlarmDescription": "Scale up if Sensor Metric is greater than the given threshold for given time",
		"EvaluationPeriods": "1",
		"Statistic": "Average",
		"MetricName": "CPU Utilization",
		"ComparisonOperator": "GreaterThanOrEqualToThreshold",
		"Threshold": {"Ref" : "AlarmThresholdUpper"},
		"Period": {"Ref" : "AlarmWatchPeriod"},
		"AlarmActions": [ { "Ref": "IncreaseCapacity" } ],
		"Namespace" : "AWS/EC2",
		"Dimensions": [ {
		"Name": "AutoScalingGroupName",
		"Value": { "Ref": "AutoScalingGroup" }
		} ]
		}
	},

	"ScaledownAlarm": {
		"Type": "AWS::CloudWatch::Alarm",	
		"DependsOn" : "DecreaseCapacity",
		"Properties": {
		"AlarmName" : { "Fn::Join" : ["",[{ "Ref" : "AWS::StackName" },"LowerThresholdAlarm"]]},
		"AlarmDescription": "Scale down if Sensor Metric is less than the given threshold for given time",
		"EvaluationPeriods": "1",
		"Statistic": "Average",
		"MetricName": "CPU Utilization",
		"ComparisonOperator": "LessThanOrEqualToThreshold",
		"Threshold": {"Ref" : "AlarmThresholdLower"},
		"Period": {"Ref" : "AlarmWatchPeriod"},
		"AlarmActions": [ { "Ref": "DecreaseCapacity" } ],
		"Namespace" : "AWS/EC2",
		"Dimensions": [ {
		"Name": "AutoScalingGroupName",
		"Value": { "Ref": "AutoScalingGroup" }
		} ]
		}
	}
}
}   